package app.views.ui{import flash.display.Sprite;import flash.display.Shape;import flash.events.*;import app.views.AbstractView;import app.interfaces.AccordianSection;import app.utils.SelectionSystem;import gs.TweenLite;import gs.easing.*;public class AbstractTabSection extends AbstractView implements AccordianSection{	//-------------------------------------------------------------// PRIVATE VARIABLES//-------------------------------------------------------------		protected var _id:uint;	protected var _selectionContainer:SelectionSystem;	protected var _subSection:Sprite;	protected var _tabButton:AbstractButton;	protected var _selectionSets:Array;	protected var _currentSelectionSet:uint;	protected var _numItemsPerSection:uint;	protected var _paginationLabel:String;	protected var _pageButton:PaginationButton;	protected var _pageBackButton:PaginationButton;	protected var _container:PaginationContainer;	//-------------------------------------------------------------// CONSTRUCTOR//-------------------------------------------------------------			public function AbstractTabSection(model:Object, id:uint)	{		super(model);				_id = id;				_tabButton = getTabButton();				_tabButton.addEventListener(MouseEvent.CLICK, tabClickHandler);				addChild(_tabButton);				_subSection = new Sprite();				_subSection.y = _tabButton.height - 1;				addChild(_subSection);				_selectionContainer = getSelectionContainer();				_subSection.addChild(_selectionContainer);				_paginationLabel = "more";	}//-------------------------------------------------------------// PRIVATE METHODS	//-------------------------------------------------------------	protected function getTabButton():AbstractButton 	{		return new TabButton(_model.steps[_id].label, _model.steps[_id].id);	}		public function addSelections():void 	{			_numItemsPerSection = getItemsPerSection();				_selectionSets = new Array();		_currentSelectionSet = 0;		var selectionLength:uint = getSelectionLength();							var selectionButton:AbstractButton;				var selectionSet:SelectionSet;								for (var i:int = 0; i < selectionLength; i++)		{			if (i % _numItemsPerSection == 0)			{				selectionSet = new SelectionSet();				_selectionContainer.addChild(selectionSet);					_selectionSets.push(selectionSet);			} 						selectionButton = getSelectionButton(i);			selectionButton.alpha = 0;			selectionButton.visible = false;						selectionSet.addChild(selectionButton);		}		_selectionSets[0].showChildren();				addPagination();	}		protected function addPagination():void 	{		if (_selectionSets.length > 1) 		{			_container = new PaginationContainer();			_container.y = 3;			_selectionContainer.addChild(_container);			_pageButton = new PaginationButton(_paginationLabel, 0, PaginationButton.FORWARD);			_pageButton.x = _container.width - _pageButton.width - 1;			_pageButton.y = 1;			_pageButton.addEventListener(MouseEvent.CLICK, pageBtnClickHandler)						_container.addChild(_pageButton);			_pageBackButton = new PaginationButton('back', 1, PaginationButton.BACK);			_pageBackButton.x = _pageButton.x - _pageBackButton.width - 4;			_pageBackButton.y = _pageButton.y;			_pageBackButton.addEventListener(MouseEvent.CLICK, pageBtnClickHandler);			_pageBackButton.visible = false;						_container.addChild(_pageBackButton);		}	}		protected function clearSelections():void 	{		while(_selectionContainer.numChildren > 0)		{			//SelectionSet(_selectionContainer.getChildAt(0)).destroy();			_selectionContainer.removeChildAt(0);		}	}	protected function getSelectionLength():uint 	{		return null;	}		protected function getItemsPerSection():uint	{		return 7;	}	//there are only 4 courses but I want to make extra blank tabs		protected function getSelectionButton(i:uint):AbstractButton 	{		return null;	}		protected function getSelectionContainer():SelectionSystem 	{		return new SelectionSystem();	}	//-------------------------------------------------------------// EVENT HANDLERS//-------------------------------------------------------------		private function tabClickHandler(evt:MouseEvent):void 	{		dispatchEvent(new Event("AccordianClick", true));	}		protected function pageBtnClickHandler(evt:MouseEvent):void 	{			var currentSection:SelectionSet;		if (evt.target == _pageButton)		{			currentSection = _selectionSets[_currentSelectionSet];										if (_selectionSets[_currentSelectionSet + 1]) 			{				currentSection.animateOut();				currentSection = _selectionSets[++_currentSelectionSet];				currentSection.animateIn();				}			//August 14: stripping out EW			//EW.trackInteraction('more-pagination-clicks');		}		else		{			currentSection = _selectionSets[_currentSelectionSet];			if (_selectionSets[_currentSelectionSet - 1]) 			{				currentSection.animateOut();				currentSection = _selectionSets[--_currentSelectionSet];				currentSection.animateIn();			}			//August 14: stripping out EW			//EW.trackInteraction('back-pagination-clicks');		}				_pageButton.visible = _currentSelectionSet != _selectionSets.length - 1;				_pageBackButton.visible = _currentSelectionSet != 0;				if (!_pageButton.visible) 		{			_pageBackButton.x = 78;			trace(">>>", _subSection.width)		}		else		{			_pageBackButton.x = _pageButton.x - _pageBackButton.width - 4;		}			}	//-------------------------------------------------------------// GETTER / SETTERS//-------------------------------------------------------------		public function get id():uint	{		return _id;	}		public function get accordianButton():Sprite	{		return _tabButton;	}		public function get subSection():Sprite	{		return _subSection;	}//-------------------------------------------------------------// PUBLIC METHODS//-------------------------------------------------------------	public function clear():void 	{		_selectionContainer.clearItems();	}//-------------------------------------------------------------// END OF CLASS	//-------------------------------------------------------------}}