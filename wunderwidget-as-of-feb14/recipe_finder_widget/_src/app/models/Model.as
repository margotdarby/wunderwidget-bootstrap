package app.models{import flash.events.EventDispatcher;import flash.events.Event;import app.events.ModelEvent;import app.utils.XMLLoader;import app.config.Config;import app.models.items.*;import flash.utils.getTimer;//import com.etr.utils.ArrayUtils;import org.casalib.util.ArrayUtil;//import app.utils.GoogleTracker;public class Model extends EventDispatcher {	//-------------------------------------------------------------// PRIVATE VARIABLES//-------------------------------------------------------------	private var _xmlLoader:XMLLoader;	private var _xml:XML;		private var _courses:Array;	private var _course:Course;		private var _ingredients:Array;	private var _ingredient:Ingredient;		private var _recipes:RecipeCollection;		private var _activeTimes:Array;	private var _activeTime:Time;		private var _results:Array;	//-------------------------------------------------------------// CONSTRUCTOR//-------------------------------------------------------------			public function Model()	{		_xmlLoader = new XMLLoader();		_xmlLoader.addEventListener(Event.COMPLETE, xmlLoadComplete);		_xmlLoader.loadXML((Config.instance.isLocal ? '../' : '') + Config.SOURCE_XML);		_xmlLoader.loadXML(Config.SOURCE_XML);	}//-------------------------------------------------------------// PRIVATE METHODS	//-------------------------------------------------------------	private function parseCourses(xml:XML):void 	{		_courses = new Array();				var courseLength:uint = xml.courses.course.length();				var courseName:String;		var courseID:uint;		var ingredientList:String;		var coursePhoto:String;				for (var i:int = 0; i < courseLength; i++)		{			courseName = xml..course[i].@name;			courseID = xml..course[i].@id;			ingredientList = xml..course[i].@ingredient_list;			coursePhoto = xml..course[i].photo;						_courses[i] = new Course(courseName, courseID, ingredientList, coursePhoto);		}	}		private function parseRecipes(xml:XML):void 	{		var recipeList:Array = new Array();		var recipesLength:uint = xml.recipes.recipe.length();				var rName:String;		var rID:uint;		var rPhoto:String;		var rLink:String;		var rCourseID:uint;		var rTimeID:String;		var rIngredientIDs:String;		var rSpec:RecipeSpec;				for (var i:int = 0; i < recipesLength; i++)		{			rName = xml..recipe[i].@name;			rID = i;			rPhoto = '';			rLink = xml..recipe[i].link;			rCourseID = xml..recipe[i].course.@id;			rTimeID = xml..recipe[i].time.@id;			rIngredientIDs = xml..recipe[i].ingredients.@ids;			rSpec = new RecipeSpec(rCourseID, rTimeID, rIngredientIDs);			recipeList[i] = new Recipe(rName, rID, rPhoto, rLink, rSpec);		}				_recipes = new RecipeCollection(recipeList);	}		private function parseIngredients(xml:XML):void 	{		_ingredients = new Array();				var ingredientsLength:uint = xml..ingredient.length();				var iName:String;		var iID:uint;		var iPhoto:String;				for (var i:int = 0; i < ingredientsLength; i++)		{			iName = xml..ingredient[i].@name;			iID = xml..ingredient[i].@id;			iPhoto = xml..ingredient[i].photo;						_ingredients[i] = new Ingredient(iName, iID, iPhoto);		}	}	//note: Times is repurposed as Serving Size for Thanksgiving 2010	private function parseTimes(xml:XML):void 	{		_activeTimes = new Array();				var timesLength:uint = xml.times.time.length();		var tName:String;		var tID:uint;				for (var i:int = 0; i < timesLength; i++)		{			tName = xml..time[i].@name;			tID = xml..time[i].@id;						_activeTimes[i] = new Time(tName, tID);		}	}//-------------------------------------------------------------// EVENT HANDLERS//-------------------------------------------------------------	private function xmlLoadComplete(evt:Event):void 	{		_xml = XML(evt.target.data);				parseCourses(_xml);		parseIngredients(_xml);		parseTimes(_xml);		parseRecipes(_xml);										dispatchEvent(new ModelEvent(ModelEvent.READY));	}	//-------------------------------------------------------------// GETTER / SETTERS//-------------------------------------------------------------		public function get courses():Array	{		return _courses;	}		public function set course(id:uint):void	{			for (var i:int = 0, len = _courses.length; i < len; i++)		{			if (_courses[i].id == id)			{				_course = _courses[i];				break;			}		}		var trackname:String = _course.name.replace(/\s/g, '-');		//EW.trackInteraction('course-button-click-' + trackname);				dispatchEvent(new ModelEvent(ModelEvent.COURSE_SET));		}		public function get course():uint	{		return _course.id;	}		public function get courseName():String	{		return _course.name;	}		public function get ingredients():Array	{				var filterIds:Function = function(element:*, index:int, arr:Array):Boolean		{			return (_course.ingredients.indexOf(String(element.id)) != -1);		}				var matchingIngredients:Array = _ingredients.filter(filterIds);	   		return matchingIngredients;	}							public function set ingredient(id:uint):void 	{				for (var i:int = 0, len = _ingredients.length; i < len; i++)		{			if (_ingredients[i].id == id)			{				_ingredient = _ingredients[i];				break;			}		}				dispatchEvent(new ModelEvent(ModelEvent.INGREDIENT_SET));		trace(_ingredients[id - 1].name);		//14 August: stripping out all EW		//EW.trackInteraction('ingredient-button-click-' + _ingredients[id - 1].name);	}		public function get ingredientName():String	{		return _ingredient.name;	}	public function set activeTime(id:uint):void	{				for (var i:int = 0, len = _activeTimes.length; i < len; i++)		{			if (_activeTimes[i].id == id)			{				_activeTime = _activeTimes[i];				break;			}		}		dispatchEvent(new ModelEvent(ModelEvent.ACTIVE_TIME_SET));		var activetime:String = _activeTimes[id - 1].name.replace(/\s/g, '-');		//August 14: stripping out EW		//EW.trackInteraction('time-button-click-' + activetime);	}	//August 14: stripping out Array business, then putting it back	public function get activeTimes():Array	{				var times:XMLList = _xml..recipe.(ingredients.@ids.toString().split(',').indexOf(String(_ingredient.id)) != -1 && course.@id == String(_course.id)).time.@id;				var timesArr:Array = ArrayUtil.removeDuplicates(times.toString().split(''));				trace(timesArr.length);				var filterTimes:Function = function(element:*, index:int, arr:Array):Boolean		{			return (timesArr.indexOf(String(element.id)) != -1);		}				var filteredTimes:Array = _activeTimes.filter(filterTimes);				trace(">>>>", filteredTimes);				return filteredTimes;	}		public function get activeTimeName():String	{		return _activeTime.name;	}	public function get results():Array	{		return _results;	}		public function get steps():Array 	{		var steps:Array = 						[							{label: 'Select a course', id: 0}, 							{label: 'Select an ingredient', id: 1}, 							{label: 'Select serving size', id: 2},						];								return steps;	}	//-------------------------------------------------------------// PUBLIC METHODS//-------------------------------------------------------------	public function search():void 	{		trace(_course.id, String(_activeTime.id), String(_ingredient.id));		var arr:Array = _recipes.search(new RecipeSpec(_course.id, String(_activeTime.id), String(_ingredient.id)));				for (var i:int = 0; i < arr.length; i++)		{			trace(arr[i].name)		}				_results = arr;				dispatchEvent(new ModelEvent(ModelEvent.SEARCH_RESULT_SET));	}//-------------------------------------------------------------// END OF CLASS	//-------------------------------------------------------------}}