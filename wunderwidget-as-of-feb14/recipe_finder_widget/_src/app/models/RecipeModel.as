package app.models{import flash.events.EventDispatcher;import flash.events.Event;import app.events.ModelEvent;import app.utils.XMLLoader;import app.config.Config;import app.models.items.*;import flash.utils.getTimer;import com.etr.utils.ArrayUtils;//import app.utils.GoogleTracker;public class RecipeModel extends EventDispatcher {	//-------------------------------------------------------------// PRIVATE VARIABLES//-------------------------------------------------------------	private var _xmlLoader:XMLLoader;	private var _xml:XML;		private var _recipeList:Object;	private var _recipesLength:uint;	//-------------------------------------------------------------// CONSTRUCTOR//-------------------------------------------------------------			public function RecipeModel()	{		_xmlLoader = new XMLLoader();		_xmlLoader.addEventListener(Event.COMPLETE, xmlLoadComplete);		//_xmlLoader.loadXML((Config.instance.isLocal ? '../' : '') + Config.RECIPE_XML);				//August 14 replace config with named xml		//August 19 make it the normal recipe, not the starbucks recipe		_xmlLoader.loadXML('starbucks_1.xml');				//August 15 try replace config method with other named xml		//_xmlLoader.loadXML('starbucks_1.xml');				//_xmlLoader.loadXML(Config.RECIPE_XML);		//_xmlLoader.loadXML('../' + Config.RECIPE_XML);	}//-------------------------------------------------------------// PRIVATE METHODS	//-------------------------------------------------------------		private function parseRecipes(xml:XML):void 	{		_recipeList = new Object();		_recipesLength = xml.recipes.recipe.length();				var rName:String;		var rID:uint;		var rLink:String;				for (var i:int = 0; i < _recipesLength; i++)		{			rName = xml..recipe[i].name;			rID = i;			rLink = xml..recipe[i].link;			_recipeList[i] = ({rname: rName, id: rID, link: rLink});		}			}	//-------------------------------------------------------------// EVENT HANDLERS//-------------------------------------------------------------	private function xmlLoadComplete(evt:Event):void 	{		_xml = XML(evt.target.data);				parseRecipes(_xml);										dispatchEvent(new ModelEvent(ModelEvent.READY));	}	//-------------------------------------------------------------// GETTER / SETTERS//-------------------------------------------------------------		public function get recipeList():Object	{		return _recipeList;	}		public function get recipesLength():uint {		return _recipesLength;	}	//-------------------------------------------------------------// PUBLIC METHODS//-------------------------------------------------------------//-------------------------------------------------------------// END OF CLASS	//-------------------------------------------------------------}}