package com.etr.media.SoundPlayer{			import flash.events.Event;	import flash.events.ProgressEvent;	import flash.events.IOErrorEvent;	import flash.events.EventDispatcher;				import com.etr.media.SoundPlayer.utils.*;	import com.etr.media.SoundPlayer.events.*;	import com.etr.media.SoundPlayer.states.*;		public class SoundPlayer extends EventDispatcher{		//-------------------------------------------------------------	// PRIVATE VARIABLES	//-------------------------------------------------------------	private var _xml								:*;		private var _autoPlay							:Boolean;	private var _autoAdvance						:Boolean;	private var _currSongBuffered					:Boolean;	private var _shuffled							:Boolean;		private var _buffer								:Number;		private var _sound								:SoundPlayerSound;		private var _playlist							:Playlist;		private var _states								:StateMachine;		//-------------------------------------------------------------	// CONSTRUCTOR	//-------------------------------------------------------------				public function SoundPlayer($xml:*, $autoPlay:Boolean = true, $autoAdvance = true, $buffer:Number = .5){						if(typeof($xml) != "string" && typeof($xml) != "xml") throw new Error("First parameter must be either a string or XML.");						_xml				=			$xml;			_autoPlay			=			$autoPlay;			_autoAdvance		=			$autoAdvance;			_buffer				=			$buffer;									init();					}	//-------------------------------------------------------------	// INIT		//-------------------------------------------------------------		private function init():void{						initVars();			initProperties();			initListeners();						_playlist.postInit();					}				private function initVars():void{						_playlist			=			new Playlist(_xml, true);									_sound				=			new SoundPlayerSound(_buffer);						_states				=			new StateMachine(_sound);						_currSongBuffered	=			false;			_shuffled			=			false;						_states.setState(StateMachine.LOADING);								}				private function initProperties():void{					}				private function initListeners():void{						_playlist.addEventListener(PlaylistEvent.READY, onPlaylistReady);						_states.addEventListener(SoundPlayerEvent.STATE_CHANGE, onStateChange);							_sound.addEventListener(IOErrorEvent.IO_ERROR, onIOError);						}			//-------------------------------------------------------------	// PRIVATE METHODS		//-------------------------------------------------------------		//-------------------------------------------------------------	// EVENT HANDLERS	//-------------------------------------------------------------		private function onPlaylistReady(e:Event):void{						_playlist.removeEventListener(PlaylistEvent.READY, onPlaylistReady);						_states.setState(StateMachine.STOPPED);						dispatchEvent(new SoundPlayerEvent(SoundPlayerEvent.PLAYLIST_LOADED));						if(_autoPlay) play();											}				private function onStateChange(e:SoundPlayerEvent):void{						dispatchEvent(e);					}				private function onSoundLoadProgress(e:ProgressEvent):void{						dispatchEvent(e);					}				private function onSoundLoadBuffered(e:SoundPlayerEvent):void{							_currSongBuffered			=		true;							play();						dispatchEvent(e);					}				private function onSoundLoadComplete(e:Event):void{						_sound.removeEventListener(ProgressEvent.PROGRESS, onSoundLoadProgress);			_sound.removeEventListener(SoundPlayerEvent.BUFFERED, onSoundLoadBuffered);			_sound.removeEventListener(Event.COMPLETE, onSoundLoadComplete);						dispatchEvent(e);							}				private function load($path:String):void{						_currSongBuffered			=		false;						_states.load($path);						_sound.addEventListener(ProgressEvent.PROGRESS, onSoundLoadProgress);			_sound.addEventListener(SoundPlayerEvent.BUFFERED, onSoundLoadBuffered);			_sound.addEventListener(Event.COMPLETE, onSoundLoadComplete);						dispatchEvent(new SoundPlayerEvent(SoundPlayerEvent.LOAD_START));					}				private function onSoundComplete(e:Event):void{						_sound.removeEventListener(Event.SOUND_COMPLETE, onSoundComplete);						dispatchEvent(e);						stop();						if(_autoAdvance) load(_playlist.next.path);					}				private function onPositionUpdate(e:SoundPlayerEvent):void{						dispatchEvent(e);								}				private function onIOError(e:IOErrorEvent):void{						_playlist.flagError(_playlist.currentIndex, e.text);						dispatchEvent(new SoundPlayerEvent(SoundPlayerEvent.SOUND_LOAD_ERROR, {indexWithError:_playlist.currentIndex}))					}		//-------------------------------------------------------------	// GETTER / SETTERS	//-------------------------------------------------------------					public function get playlist():Array{			var a:Array = _playlist.clone();			return a;		}				public function get currentArtist():String{			return _playlist.current.artist;		}				public function get currentAlbum():String{			return _playlist.current.album;		}				public function get currentTrack():String{			return _playlist.current.track;		}				public function get currentIndex():uint{			return _playlist.currentIndex;		}				public function get playlistName():String{			return _playlist.name;		}				public function get state():String{			return _states.state;					}				public function set position($position:Number):void{			_sound.position = $position;		}				public function get position():Number{			return _sound.position;		}				public function get duration():Number{			return _sound.duration;		}				public function get volume():Number{			return _sound.volume;		}				public function set volume($volume:Number):void {			_sound.volume = $volume;		}				public function get panning():Number{			return _sound.panning;		}				public function set panning($panning:Number):void {			_sound.panning = $panning;		}				public function get buffer():Number{			return _sound.buffer;		}				public function set buffer($buffer:Number):void {			_sound.buffer = $buffer;		}				public function get shuffled():Boolean{			return _shuffled;		}			//-------------------------------------------------------------	// PUBLIC METHODS	//-------------------------------------------------------------			public function play():void{						if(_currSongBuffered){								_states.play();								_sound.addEventListener(Event.SOUND_COMPLETE, onSoundComplete);								_sound.addEventListener(SoundPlayerEvent.POSITION_UPDATE, onPositionUpdate);								dispatchEvent(new SoundPlayerEvent(SoundPlayerEvent.PLAYING));						}else{								load(_playlist.current.path);							}					}				public function stop():void{						_states.stop();						_sound.removeEventListener(SoundPlayerEvent.POSITION_UPDATE, onPositionUpdate);						dispatchEvent(new SoundPlayerEvent(SoundPlayerEvent.POSITION_UPDATE, {position:0, duration:duration}))						dispatchEvent(new SoundPlayerEvent(SoundPlayerEvent.STOPPED));					}				public function pause():void{						_states.pause();						_sound.removeEventListener(SoundPlayerEvent.POSITION_UPDATE, onPositionUpdate);						dispatchEvent(new SoundPlayerEvent(SoundPlayerEvent.PAUSED));					}				public function next():void{						stop();						load(_playlist.next.path);					}				public function previous():void{						stop();						load(_playlist.previous.path);						}				public function goto($id:uint):void{						stop();						load(_playlist.getMedia($id).path);					}				public function shuffle():void{						_shuffled		=		true;						_playlist.shuffle();						dispatchEvent(new SoundPlayerEvent(SoundPlayerEvent.SHUFFLED));					}				public function unshuffle():void{						_shuffled		=		false;						_playlist.unshuffle();						dispatchEvent(new SoundPlayerEvent(SoundPlayerEvent.SHUFFLED));					}	//-------------------------------------------------------------	// END OF CLASS		//-------------------------------------------------------------	}}