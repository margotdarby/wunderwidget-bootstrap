package com.etr.media.SoundPlayer.utils{		import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundTransform; 		import flash.net.URLRequest;		import flash.events.*;		import flash.utils.Timer;		import com.etr.media.SoundPlayer.events.SoundPlayerEvent;	public class SoundPlayerSound extends EventDispatcher{				//-------------------------------------------------------------	// PRIVATE VARIABLES	//-------------------------------------------------------------		private var _sound					:Sound;				private var _channel				:SoundChannel;				private var _currentPosition		:Number;		private var _bufferAmount			:Number;		private var _volume					:Number;		private var _panning				:Number;		private var _duration				:Number;			private var _autoPlay				:Boolean;		private var _playing				:Boolean;		private var _buffered				:Boolean;				private var _positionTimer			:Timer;		//-------------------------------------------------------------	// CONSTRUCTOR	//-------------------------------------------------------------				public function SoundPlayerSound($buffer:Number = .5){						_bufferAmount				=			$buffer;						init();					}	//-------------------------------------------------------------	// INIT	//-------------------------------------------------------------		private function init():void{						initVars();			initProperties();			initListeners();					}				private function initVars():void{						_channel					=			new SoundChannel();						_positionTimer				=			new Timer(100);						_currentPosition			=			0;			_volume						=			1;			_panning					=			0;			_duration					=			0;						_autoPlay					=			true;			_playing					=			false;			_buffered					=			false;					}				private function initProperties():void{					}				private function initListeners():void{					}	//-------------------------------------------------------------	// PRIVATE METHODS		//-------------------------------------------------------------		private function startPositionTimer():void{						_positionTimer.addEventListener(TimerEvent.TIMER, onTimer);			_positionTimer.start();					}				private function stopPositionTimer():void{						_positionTimer.removeEventListener(TimerEvent.TIMER, onTimer);			_positionTimer.stop();					}	//-------------------------------------------------------------	// EVENT HANDLERS	//-------------------------------------------------------------		private function onLoadComplete(e:Event):void{						_duration = _sound.length;						_sound.removeEventListener(Event.COMPLETE, onLoadComplete);			_sound.removeEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);			_sound.removeEventListener(ProgressEvent.PROGRESS, progressHandler);						dispatchEvent(new Event(Event.COMPLETE));					}				private function ioErrorHandler(e:IOErrorEvent):void{					dispatchEvent(e);								}				private function progressHandler(e:ProgressEvent):void{						if(_sound.length){				_duration = (e.bytesTotal / (e.bytesLoaded / _sound.length));			}						if((e.bytesLoaded/e.bytesTotal) > _bufferAmount){								if(!_buffered){										_buffered = true;					dispatchEvent(new SoundPlayerEvent(SoundPlayerEvent.BUFFERED));									}			}						dispatchEvent(new ProgressEvent(ProgressEvent.PROGRESS, false, false, e.bytesLoaded, e.bytesTotal));		}				private function soundComplete(e:Event):void{						dispatchEvent(new Event(Event.SOUND_COMPLETE));					}				private function onTimer(e:Event):void{						dispatchEvent(new SoundPlayerEvent(SoundPlayerEvent.POSITION_UPDATE, {position:_channel.position, duration:_duration}));					}		//-------------------------------------------------------------	// GETTER / SETTERS	//-------------------------------------------------------------			public function get duration():Number{			return _duration;		}				public function get position():Number{			return _channel.position;					}				public function set position($position:Number):void{						if($position < 0){								throw new Error($position + " is an invalid position.");							}else if($position >= _duration){								dispatchEvent(new Event(Event.SOUND_COMPLETE));							}else{								if(_playing){					play($position);				}else{					_currentPosition = $position;								}							}					}				public function get volume():Number{			return _channel.soundTransform.volume;		}				public function set volume($volume:Number):void {			_volume = $volume;			_channel.soundTransform = new SoundTransform(_volume, _panning);		}				public function get panning():Number{			return _panning;		}				public function set panning($panning:Number):void {			_panning = $panning;			_channel.soundTransform = new SoundTransform(_volume, _panning);		}				public function get buffer():Number{			return _bufferAmount;		}					public function set buffer($buffer:Number):void {			_bufferAmount = $buffer;		}			//-------------------------------------------------------------	// PUBLIC METHODS	//-------------------------------------------------------------		public function play($position:Number = -1):void{						_channel.removeEventListener(Event.SOUND_COMPLETE, soundComplete);						if($position > -1){				_currentPosition = $position;			}						_channel.stop();						_playing					=		true;					_channel					=		_sound.play(_currentPosition);						_channel.soundTransform		=		new SoundTransform(_volume, _panning);						_channel.addEventListener(Event.SOUND_COMPLETE, soundComplete);						startPositionTimer();									}					public function stop():void{			_playing			=		false;						_currentPosition	=		0;									_channel.stop();						stopPositionTimer();					}					public function pause():void{			_playing			=		false;						_currentPosition	=		_channel.position;						_channel.stop();						stopPositionTimer();		}				public function load($path:String, $autoPlay:Boolean = true):void{						_autoPlay			=		$autoPlay;			_currentPosition	=		0;			_buffered			=		false;						try{				_sound.close();			}catch(e:Error){						}						stop();						_sound				=		new Sound();						_sound.addEventListener(Event.COMPLETE, onLoadComplete);			_sound.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);			_sound.addEventListener(ProgressEvent.PROGRESS, progressHandler);						_sound.load(new URLRequest($path));								}		//-------------------------------------------------------------	// END OF CLASS		//-------------------------------------------------------------	}}