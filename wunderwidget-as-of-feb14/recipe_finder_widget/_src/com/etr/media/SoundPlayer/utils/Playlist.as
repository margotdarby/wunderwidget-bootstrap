package com.etr.media.SoundPlayer.utils{	import com.etr.media.SoundPlayer.events.*;		import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IEventDispatcher;		import flash.utils.ByteArray; 	dynamic public class Playlist extends EventDispatcher {		//-------------------------------------------------------------	// PRIVATE VARIABLES	//-------------------------------------------------------------		private var _xml					:*;		private var _name					:String;				private var _autoLoad				:Boolean;			private var _kx						:KillerXML;				private var _i						:uint;		private var _currentPos				:uint;		private var _lastPos				:uint;				private var _currentMedia			:Object;				//private var _original				:Array;		private var _current				:Array;			//-------------------------------------------------------------	// CONSTRUCTOR	//-------------------------------------------------------------				public function Playlist($xml:*, $autoLoad:Boolean = true){						super();						_xml				=			$xml;							_autoLoad			=			$autoLoad;						init();					}		//-------------------------------------------------------------	// INIT	//-------------------------------------------------------------			private function init():void{					initVars();			initProperties();			initListeners();				}			private function initVars():void{										_i					=			0;			_currentPos			=			0;						_currentMedia		=			new Object();						_current			=			new Array();												}			private function initProperties():void{				}			private function initListeners():void{				}	//-------------------------------------------------------------	// PRIVATE METHODS		//-------------------------------------------------------------	//-------------------------------------------------------------	// EVENT HANDLERS	//-------------------------------------------------------------		private function xmlLoadComplete(e:XML):void{						var ref						:XML;						_name			=			String(e.playlist.name)						for(_i=0; _i<e.playlist.media.children().length(); _i++){								ref			=			e.playlist.media.children()[_i];								addMedia(ref.path, ref.album, ref.artist, ref.track, ref.extras);							}					dispatchEvent(new PlaylistEvent(PlaylistEvent.READY));								}		//-------------------------------------------------------------	// GETTER / SETTERS	//-------------------------------------------------------------			public function get currentIndex():uint{			return _currentPos;		}				public function get next():Object{					if(_current.length>0){								if(_currentPos < _current.length-1){					_currentPos++;				}else{					_currentPos = 0;				}								return _current[_currentPos];							}else{								throw new Error("There are no songs in the playlist.");				return null;							}		}				public function get current():Object{						return _current[_currentPos];				}				public function get previous():Object{						if(_current.length>0){								if(_currentPos > 0){					_currentPos--;				}else{					_currentPos = _current.length-1;				}								return _current[_currentPos];							}else{								throw new Error("There are no songs in the playlist.");				return null;							}					}				public function get name():String{			return _name;		}						public function clone($toClone:Array=null):Array{ 					if(!$toClone) $toClone = _current;				    var myBA:ByteArray = new ByteArray(); 				    myBA.writeObject($toClone); 		    myBA.position = 0; 		    return(myBA.readObject());		 		}				public function get list():Array{			return _current;		}	//-------------------------------------------------------------	// PUBLIC METHODS	//-------------------------------------------------------------				public function postInit():void{						switch(typeof(_xml)){								case "xml":					xmlLoadComplete(_xml);					break;				case "string":					_kx					=			new KillerXML(_xml, {onLoadComplete:xmlLoadComplete, autoLoad:_autoLoad});					break;				default:							}					}				public function load():void{			_kx.load();		}				public function addMedia($path:String, $album:String = "", $artist:String = "", $track:String = "", $extras:XMLList = null):void{						var obj:Object		=		{path:$path, album:$album, artist:$artist, track:$track, id:_current.length, hasError:false};						for (var i:int = 0; i < $extras.children().length(); i++){							obj[$extras.children()[i].name()] = $extras.children()[i];							}						_current.push(obj);				}				public function getMedia($position:uint):Object{						if($position < _current.length){				_currentPos = $position;				return _current[_currentPos];			}else{				throw new Error("Playlist position is out of bounds.");				return null;			}								}				public function shuffle($startIndex:int = 0, $endIndex:int = 0):void{						var toShuffle			:Array		=		clone(_current);			var i					:uint		=		0;			var tempCurr			:Object		=		this.current;							if($endIndex == 0) $endIndex = toShuffle.length-1;						for (i = $endIndex; i>$startIndex; i--) {												var randomNumber	:int		=		Math.floor(Math.random()*$endIndex)+$startIndex;				var tmp				:* 			=		toShuffle[i];								toShuffle[i] 					=		toShuffle[randomNumber];				toShuffle[randomNumber] 		=		tmp;											}								_current							=		toShuffle;			toShuffle							=		null;						for (i = 0; i < _current.length; i++)			{				if(_current[i].id == tempCurr.id){					_currentPos = i;					break;				}			}							}				public function unshuffle():void{						var temp				:Array		=		clone(_current);			var tempCurr			:Object		=		this.current;						for (var i:int = 0; i < temp.length; i++)			{				_current[temp[i].id] = temp[i];			}							temp								=		null;						for (i = 0; i < _current.length; i++)			{				if(_current[i].id == tempCurr.id){					_currentPos = i;					break;				}			}					}						public function flagError($errorId:uint, $error:String):void{						_current[$errorId].hasError			=		true;			_current[$errorId].errorMessage		=		$error;											}					//-------------------------------------------------------------	// END OF CLASS		//-------------------------------------------------------------	}}