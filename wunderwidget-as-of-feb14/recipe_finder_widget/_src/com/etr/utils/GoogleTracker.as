package com.etr.utils{import flash.external.ExternalInterface;import flash.system.Security;	/**	 *	The <code>GoogleTracker</code> class is a Singleton class (should not be instantiated, use GoogleTracker.getInstance() instead) that simplifies the tracking call of events and pageviews targeted at Google Analytics.	 *	It will retrieve the current directory name from the browswer and direct all calls to /directoryName/Flash Page Views/ for <code>trackPageview</code> calls and to the Event Tracking panel for all <code>trackEvent</code> calls .  You can specify a sub-directory of /Flash Page Views to use in all <code>trackPageview</code> calls by calling the <code>setSubDirectory</code> method and passing the sub-directory as a parameter.	 *	@langversion	ActionScript 3.0	 *	@playerversion	Flash Player 9	 *	@author Ryan Ogden	 */public class GoogleTracker  {	//-------------------------------------------------------------// PRIVATE VARIABLES//-------------------------------------------------------------	private static var instance:GoogleTracker;	private var _isOn:Boolean;	private var _subDirectory:String;	private var _isLocal:Boolean;	//-------------------------------------------------------------// CONSTRUCTOR//-------------------------------------------------------------			/**	 *	This is a Singleton class and should not be instantiated using the constructor method.  Instead use <code>GoogleTracker.getInstance()</code>.	 *	@constructor	 */	public function GoogleTracker(enforcer:SingletonEnforcer)	{		_isOn = true;		_isLocal = Security.sandboxType == Security.LOCAL_TRUSTED;		trace(_isLocal);	}//-------------------------------------------------------------// PUBLIC METHODS//-------------------------------------------------------------	/**	 *	Returns the singleton instance of <code>GoogleTracker</code>.  Use the return value of this method to call all methods of the <code>GoogleTracker</code> class.	 *	@public	 *	@return		An instance of the <code>GoogleTracker</code> class	 *	@example	 *	<listing version="3.0">	 *	GoogleTracker.getInstance().trackPageview("Videos");	 *	</listing>	 */		public static function getInstance():GoogleTracker	{		if(GoogleTracker.instance == null) GoogleTracker.instance = new GoogleTracker(new SingletonEnforcer());		return GoogleTracker.instance;	}	//-------------------------------------------------------------		/**	 *	Calls the Google Analytics javascript object <code>trackPageview</code> function, passing on the specified page name	 *	@public	 *	@param	page	 A string specifying the Flash page name.  Example "videos"	 *	@example	 * <listing version="3.0" >	 * GoogleTracker.getInstance().trackPageview("videos");	 * </listing>	 */		public function trackPageview(page:String):void 	{		// check to see if tracking is turned off		if(!_isOn) return;				// try grabbing url from browser		var urlPath:String = ExternalInterface.call("window.location.pathname.toString");				if (_isLocal || urlPath == null)		{			trace("trackPageview:  Flash Page Views/" + page);			return;		}					// format event string		if(page.indexOf("/") == 0) page = page.substring(1);				// format browser path		var finalSlash:Number = urlPath.lastIndexOf("/");		var trackingURL:String = urlPath.substring(0, finalSlash);				// construct analytics call		var analyticsPath:String = trackingURL + "/Flash Page Views/" + ((_subDirectory) ? _subDirectory + "/" : '') + page;				trace(analyticsPath);				// call google tracker function from js		ExternalInterface.call("pageTracker._trackPageview", analyticsPath);	}	//-------------------------------------------------------------	/**	 *	Calls the Google Analytics javascript object <code>trackEvent</code> function, passing on the specified event data	 *	@public	 *	@param	category	A string specifying the event category.  Example "Video Player"	 *	@param	action	 	A string specifying the event action.  Example "Plays"	 *	@param	label	 	An optional string specifying the event label.  Example "South Park Episode 1"	 *	@param  value		An optional integer signifying a numeric value associated with the event.	 *	@example	 * <listing version="3.0" >	 * GoogleTracker.getInstance().trackEvent("Video Player", "Plays", "Name Of Video");	 * </listing>	 */		public function trackEvent(category:String, action:String, label:String = null, value:int = -1):void	{		if(!_isOn) return;				var callStack:Array = ["pageTracker._trackEvent", category, action];				if (label) callStack.push(label);				if (value != -1) callStack.push(value);				if (_isLocal)		{			var log:String = "trackEvent:  category: " + category + " | action: " + action;						if (label)			{				log +=  " | label: " + label;								if (value != -1) log += " | optional value: " + value;			}						trace(log);						return;		}				ExternalInterface.call.apply(ExternalInterface, callStack);	}	//-------------------------------------------------------------	   /**    *	Prevents all calls to the <code>trackEvent</code> and <code>trackPageview</code> methods from being made.  Call this method in the constructor of your document class before any <code>trackEvent</code> or <code>trackPageview</code> calls are made.  Remove the call and recompile to turn tracking back on.	    *	@public    */	public function turnOff():void	{		_isOn = false;		trace("ALERT! Google tracking is currently off.  Remove the call to turnOff() to implement for live deployment.");	}	//-------------------------------------------------------------	/**	 *	Allows a sub-directory to be used after the /Flash Page Views/ directory for all calls made to trackPageview().  Call this method in the constructor of your document class before trackPageview() calls are made.		 *	@public	 *	@param	directory	 A string specifying the sub-directory to insert after the /Flash Page Views/ directory	 */	public function setSubDirectory(directory:String):void	{		if(directory.indexOf("/") == 0) directory = directory.substring(1);				if(directory.indexOf("/") == directory.length - 1) directory = directory.substring(0, directory.length - 1);				_subDirectory = directory;	}//-------------------------------------------------------------// END OF CLASS	//-------------------------------------------------------------}}// singleton enforcer private classclass SingletonEnforcer {};